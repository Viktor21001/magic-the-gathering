const router = require('express').Router();

const { User, Card, Basket } = require('../../db/models');

// const renderTemplate = require('../lib/renderTemplate');

router.delete('/:id', async (req, res) => {
  const { userId } = req.session;
  const { id } = req.params;

  try {
    const user = await User.findByPk(userId);
    const basket = await Basket.findByPk(id);
    console.log('üöÄ ~ router.delete :', basket);
    if (!user) {
      res.status(404).json({ err: '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' });
    } else if (!basket) {
      res.status(404).json({ err: '–¢–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' });
    } else if (user.id === basket.userId) {
      await basket.destroy();
      res.status(200).json({ msg: '–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!' });
    } else {
      res.status(403).json({ err: '–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏!' });
    }
  } catch (error) {
    console.log(error);
    res.status(500).json({ err: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!' });
  }
});

router.post('/new', async (req, res) => {
  const { userId } = req.session;
  const { companyName, number } = req.body;

  const phoneRegex = /^\+?\d{1,3}\s?\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}$/;

  // —ç—Ö, –Ω–∞–¥–æ –±—ã–ª–æ —Å—Ä–∞–∑—É required —Å—Ç–∞–≤–∏—Ç—å , –∞ –Ω–µ –ø–∏—Å–∞—Ç—å —Ç–∞–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—É—Ç...
  if (!companyName) {
    res.status(400).json({ err: '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏!' });
  } else if (!number) {
    res.status(400).json({ err: '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏!' });
    // –Ω–µ —É—Å–ø–µ–≤–∞—é, –∞–∞–∞
    // } else if (!phoneRegex.test(number)) {
    //   res.status(400).json({ err: '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏!' })
  } else {
    try {
      const user = await User.findByPk(userId);
      // –¥–∞ –∏ —ç—Ç–∞ –∑–∞—â–∏—Ç–∞ –∏–∑–ª—à–Ω—è —Ç–∞–∫ —Ç–æ.
      if (user) {
        try {
          const company = await Company.create({
            companyName,
            number,
            userId,
          });
          console.log(res);
          res.status(200).json({ msg: '–ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!' });
        } catch (error) {
          console.log(error);
          res.status(400).json({ err: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏!' });
        }
      } else {
        res.status(404).json({ err: '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' });
      }
    } catch (error) {
      console.log(error);
      res.status(500).json({ err: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!' });
    }
  }
});

//!   ---------- !!!!!!!!!!!! –ë–û–ï–í–û–ô-------------------!!!!!!!
// orderRouter.post('/:id', async (req, res) => {
//   const { userId } = req.session;
//   const { id } = req.params;
//   if (userId) {
//     try {
//       const user = await User.findByPk(userId);
//       const card = await Card.findByPk(id);
//       console.log(user.id, card.id);
//       if (user && card) {
//         const basket = await Basket.findOne({
//           where: { userId: user.id, cardId: card.id },
//         });
//         if (!basket) {
//           await Basket.create({
//             userId: user.id,
//             cardId: card.id,
//           });
//           res.json({ msg: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!' });
//         } else {
//           res.json({ err: '–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!' });
//         }
//       } else {
//         res.json({ err: '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' });
//       }
//     } catch (error) {
//       console.log(error);
//       res.json({ err: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!' });
//     }
//   } else {
//     res.json({ err: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞!' });
//   }
// });

// // –ë–û–ï–í–û–ô
// orderRouter.delete('/:id', async (req, res) => {
//   const { userId } = req.session;
//   const { id } = req.params;
//   if (userId) {
//     try {
//       const user = await User.findByPk(userId);
//       const basket = await Basket.findByPk(id);
//       const card = await Card.findByPk(basket.cardId);
//       if (user && basket && card) {
//         if (user.id === basket.userId) {
//           await basket.destroy();
//           res.json({ msg: '–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —Å –∫–æ—Ä–∑–∏–Ω—ã!' });
//         } else {
//           res.json({ err: '–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü!' });
//         }
//       } else {
//         res.json({ err: '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' });
//       }
//     } catch (error) {
//       console.log(error);
//       res.json({ err: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!' });
//     }
//   } else {
//     res.json({ err: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ!' });
//   }
// });

module.exports = router;
